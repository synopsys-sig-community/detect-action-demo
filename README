
Builds of the IO Client for Mac, Linux, and Windows are available in the
binaries directory. The examples below assume linux, but you should use
the appropriate binary and syntax for your OS and Shell.

Example run:

export CUSTOM_VARIABLE="Hello world"
./binaries/linux/io --adapters adapters.json Project.Branch.Name="My Branch"


Only adapters defined in adapters.json will be loaded and executed. The
example adapters consume Project.Branch.Name, produce a custom resource read
from the CUSTOM_VARIABLE environment variable, and write that resource to the
IT_WORKS file in this directory. Naturally this is a silly example, but it gets
the idea across.

You can also pass in variables using a json file like so:

io --state mydata.json --adapters adapters.json


schema.txt contains the current list of data namespaces available. We will be
providing better ways of viewing and documenting this list in the future, I
just through together a quick list of what we currently have in code.

The "Resources" resource is a catch-all for custom fields. Notice how we
don't define anything under it in the schema, but the example creates its
own "Resources.Foo.Bar" resource? You can define your own namespaced data here.
This way third-party tools can be added and integrated into the IO workflow.
For example, customers could add their own "Resources.Org.Edgewall.Trac.*" settings for
their BTS, or even a "Resources.Com.Checkmarx.*" for a competitors tool.
